#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para YouTube Ultra HD Video Downloader
Verifica que todas las dependencias est√©n funcionando correctamente
"""

import sys
import os

def test_imports():
    """Prueba que todas las importaciones funcionen"""
    print("üîç Probando importaciones...")
    
    try:
        import tkinter as tk
        print("‚úÖ tkinter - OK")
    except ImportError as e:
        print(f"‚ùå tkinter - Error: {e}")
        return False
    
    try:
        from tkinter import ttk, filedialog, messagebox
        print("‚úÖ tkinter.ttk, filedialog, messagebox - OK")
    except ImportError as e:
        print(f"‚ùå tkinter.ttk, filedialog, messagebox - Error: {e}")
        return False
    
    try:
        import threading
        print("‚úÖ threading - OK")
    except ImportError as e:
        print(f"‚ùå threading - Error: {e}")
        return False
    
    try:
        import yt_dlp
        print("‚úÖ yt-dlp - OK")
    except ImportError as e:
        print(f"‚ùå yt-dlp - Error: {e}")
        return False
    
    try:
        from PIL import Image, ImageTk
        print("‚úÖ Pillow (PIL) - OK")
    except ImportError as e:
        print(f"‚ùå Pillow (PIL) - Error: {e}")
        return False
    
    try:
        import requests
        print("‚úÖ requests - OK")
    except ImportError as e:
        print(f"‚ùå requests - Error: {e}")
        return False
    
    try:
        import pytz
        print("‚úÖ pytz - OK")
    except ImportError as e:
        print(f"‚ùå pytz - Error: {e}")
        return False
    
    try:
        from datetime import datetime
        print("‚úÖ datetime - OK")
    except ImportError as e:
        print(f"‚ùå datetime - Error: {e}")
        return False
    
    return True

def test_basic_functionality():
    """Prueba funcionalidades b√°sicas"""
    print("\nüîß Probando funcionalidades b√°sicas...")
    
    try:
        # Probar creaci√≥n de ventana b√°sica
        import tkinter as tk
        root = tk.Tk()
        root.withdraw()  # Ocultar ventana
        
        # Probar creaci√≥n de variables
        from tkinter import StringVar
        test_var = StringVar(value="test")
        print("‚úÖ Creaci√≥n de variables tkinter - OK")
        
        # Probar datetime colombiano
        from datetime import datetime
        import pytz
        try:
            colombia_tz = pytz.timezone('America/Bogota')
            now = datetime.now(colombia_tz)
            formatted = now.strftime("%Y%m%d_%H%M%S")
            print(f"‚úÖ Fecha colombiana: {formatted} - OK")
        except Exception as e:
            print(f"‚ö†Ô∏è  Fecha colombiana - Fallback: {e}")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå Funcionalidades b√°sicas - Error: {e}")
        return False

def test_yt_dlp():
    """Prueba yt-dlp b√°sico"""
    print("\nüìπ Probando yt-dlp...")
    
    try:
        import yt_dlp
        
        # Crear instancia b√°sica
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True
        }
        
        ydl = yt_dlp.YoutubeDL(ydl_opts)
        print("‚úÖ Instancia yt-dlp creada - OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå yt-dlp - Error: {e}")
        return False

def test_pillow():
    """Prueba Pillow b√°sico"""
    print("\nüé® Probando Pillow...")
    
    try:
        from PIL import Image, ImageDraw
        
        # Crear imagen b√°sica
        img = Image.new('RGBA', (100, 100), (99, 102, 241, 255))
        draw = ImageDraw.Draw(img)
        draw.ellipse([10, 10, 90, 90], fill=(255, 255, 255, 255))
        
        # Guardar temporalmente
        temp_path = "test_icon.png"
        img.save(temp_path)
        
        # Verificar que se cre√≥
        if os.path.exists(temp_path):
            os.remove(temp_path)
            print("‚úÖ Creaci√≥n y guardado de imagen - OK")
        else:
            print("‚ùå No se pudo crear imagen de prueba")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Pillow - Error: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("=" * 60)
    print("üß™ PRUEBAS DEL SISTEMA")
    print("YouTube Ultra HD Video Downloader")
    print("=" * 60)
    print()
    
    all_tests_passed = True
    
    # Prueba 1: Importaciones
    if not test_imports():
        all_tests_passed = False
    
    # Prueba 2: Funcionalidades b√°sicas
    if not test_basic_functionality():
        all_tests_passed = False
    
    # Prueba 3: yt-dlp
    if not test_yt_dlp():
        all_tests_passed = False
    
    # Prueba 4: Pillow
    if not test_pillow():
        all_tests_passed = False
    
    print("\n" + "=" * 60)
    
    if all_tests_passed:
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON!")
        print("‚úÖ El sistema est√° listo para funcionar")
        print("\nüöÄ Puedes ejecutar el programa principal:")
        print("   python youtube_360_downloader.py")
    else:
        print("‚ùå ALGUNAS PRUEBAS FALLARON")
        print("‚ö†Ô∏è  Revisa los errores arriba")
        print("\nüîß Ejecuta el instalador para corregir problemas:")
        print("   python installer.py")
    
    print("=" * 60)
    
    input("\nPresiona Enter para salir...")

if __name__ == "__main__":
    main()
